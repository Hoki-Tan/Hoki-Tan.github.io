import{_ as y}from"./ValaxyMain.vue_vue_type_style_index_0_lang.D7ooCmjI.js";import"./chunks/@vueuse/motion.ChokKGFY.js";import{e as E,u as g,a as u}from"./chunks/vue-router.BxwhCc9-.js";import{aa as c,ab as m,ap as a,ag as t,af as i,ai as s,O as A,a1 as F}from"./framework.CzqXvcaZ.js";import"./app.DVqel8FN.js";import"./chunks/dayjs.BdcnXKr1.js";import"./chunks/vue-i18n.DKUSMKgm.js";import"./chunks/pinia.BnQGIDvb.js";/* empty css                    */import"./chunks/nprogress.B6x19dEb.js";import"./YunComment.vue_vue_type_style_index_0_lang.Bn3XtiCr.js";import"./index.C5okkQwF.js";import"./YunPageHeader.vue_vue_type_script_setup_true_lang.DNB4zIcK.js";import"./post.Cv-HA4MW.js";const C=E("/posts/C Sharp之Array、ArrayList和List的区别",async r=>JSON.parse('{"title":"C# Array、ArrayList和List的区别","description":"","frontmatter":{"cover":"https://img.alicdn.com/imgextra/i4/3343836081/O1CN019ltuIl1un9ZHZFgDg_!!3343836081.jpg","title":"C# Array、ArrayList和List的区别","date":"2022-05-30 17:02:23","tags":"C Sharp","categories":"编程语言"},"headers":[],"relativePath":"pages/posts/C Sharp之Array、ArrayList和List的区别.md","lastUpdated":null}'),{lazy:(r,n)=>r.name===n.name}),N={__name:"C Sharp之Array、ArrayList和List的区别",setup(r,{expose:n}){const{data:h}=C(),p=u(),o=g(),e=Object.assign(o.meta.frontmatter||{},h.value?.frontmatter||{});return p.currentRoute.value.data=h.value,F("valaxy:frontmatter",e),globalThis.$frontmatter=e,n({frontmatter:{cover:"https://img.alicdn.com/imgextra/i4/3343836081/O1CN019ltuIl1un9ZHZFgDg_!!3343836081.jpg",title:"C# Array、ArrayList和List的区别",date:"2022-05-30 17:02:23",tags:"C Sharp",categories:"编程语言"}}),(l,k)=>{const d=y;return m(),c(d,{frontmatter:A(e)},{"main-content-md":a(()=>[...k[0]||(k[0]=[i("h1",{id:"c-array、arraylist和list的区别",tabindex:"-1"},[s("C#Array、ArrayList和List的区别 "),i("a",{class:"header-anchor",href:"#c-array、arraylist和list的区别","aria-label":'Permalink to "C#Array、ArrayList和List的区别"'},"​")],-1),i("h3",{id:"array",tabindex:"-1"},[s("Array "),i("a",{class:"header-anchor",href:"#array","aria-label":'Permalink to "Array"'},"​")],-1),i("p",null,[s("​ "),i("strong",null,"Array"),s(" 类是 C# 中所有数组的基类，它是在 System 命名空间中定义。Array 类提供了各种⽤于数组的属性和⽅法。 属性如： IsReadOnly数组只读。Length数组长度。 ⽅法常⽤的如下：")],-1),i("ol",null,[i("li",null,[i("p",null,[i("strong",null,"Clear"),s(" 根据元素的类型，设置数组中某个范围的元素为零、为 false 或者为 null。")])]),i("li",null,[i("p",null,[i("strong",null,"Copy(Array, Array, Int32)"),s(" 从数组的第⼀个元素开始复制某个范围的元素到另⼀个数组的第⼀个元素位置。长度由⼀个 32 位整数指定。")])]),i("li",null,[i("p",null,[i("strong",null,"CopyTo(Array, Int32)"),s(" 从当前的⼀维数组中复制所有的元素到⼀个指定的⼀维数组的指定索引位置。索引由⼀个 32 位整数指定。")])]),i("li",null,[i("p",null,[i("strong",null,"GetLength"),s(" 获取⼀个 32 位整数，该值表⽰指定维度的数组中的元素总数。")])]),i("li",null,[i("p",null,[i("strong",null,"GetType"),s(" 获取当前实例的类型。从对象（Object）继承。")])]),i("li",null,[i("p",null,[i("strong",null,"GetValue(Int32)"),s(" 获取⼀维数组中指定位置的值。索引由⼀个 32 位整数指定。")])]),i("li",null,[i("p",null,[i("strong",null,"IndexOf(Array, Object)"),s(" 搜索指定的对象，返回整个⼀维数组中第⼀次出现的索引。")])]),i("li",null,[i("p",null,[i("strong",null,"Reverse(Array)"),s(" 逆转整个⼀维数组中元素的顺序。")])]),i("li",null,[i("p",null,[i("strong",null,"SetValue(Object, Int32)"),s(" 给⼀维数组中指定位置的元素设置值。索引由⼀个 32 位整数指定。")])]),i("li",null,[i("p",null,[i("strong",null,"Sort(Array)"),s(" 使⽤数组的每个元素的 IComparable 实现来排序整个⼀维数组中的元素。")])]),i("li",null,[i("p",null,[i("strong",null,"ToString"),s(" 返回⼀个表⽰当前对象的字符串。从对象（Object）继承。")])])],-1),i("p",null,"使⽤⽅法如下：",-1),i("div",{class:"language-C#"},[i("button",{title:"Copy code",class:"copy"}),i("span",{class:"lang"},"C#"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[i("code",{"v-pre":""},[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"int"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"[] "),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"nums"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," ="),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {"),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"1"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},","),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"2"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},","),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"3"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},","),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"4"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},","),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"5"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," };")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"Array."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"Sort"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(nums);")])])]),i("button",{class:"code-block-unfold-btn"})],-1),i("hr",null,null,-1),i("h3",{id:"arraylist",tabindex:"-1"},[s("ArrayList "),i("a",{class:"header-anchor",href:"#arraylist","aria-label":'Permalink to "ArrayList"'},"​")],-1),i("p",null,[s("​ "),i("strong",null,"ArrayList"),s("动态数组，是.Net Framework提供的⽤于数据存储和检索的专⽤类，它是命名空间System.Collections下的⼀部分。它的 ⼤⼩是按照其中存储的数据来动态扩充与收缩的。所以，我们在声明ArrayList对象时并不需要指定它的长度。ArrayList继承了IList接⼝， 所以它可以很⽅便的进⾏数据的添加，插⼊和移除.比如：")],-1),i("div",{class:"language-C#"},[i("button",{title:"Copy code",class:"copy"}),i("span",{class:"lang"},"C#"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[i("code",{"v-pre":""},[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"ArrayList"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," al"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," ="),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," new"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," ArrayList"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"();")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"//新增数据")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"al."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"Add"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"abc"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"); al."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"Add"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"123"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},");")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"//修改数据")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"al["),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"2"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"] "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," 345"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},";")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"//移除数据")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"al."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"RemoveAt"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"0"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},");")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"//插⼊数据")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"al."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"Insert"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"0"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"hello world"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},");")])])]),i("button",{class:"code-block-unfold-btn"})],-1),i("hr",null,null,-1),i("h3",{id:"list",tabindex:"-1"},[s("List "),i("a",{class:"header-anchor",href:"#list","aria-label":'Permalink to "List"'},"​")],-1),i("p",null,[s("​ 在ArrayList中，我们不仅插⼊了字符串”abc”，⽽且⼜插⼊了数字123。这样在ArrayList中插⼊不同类型的数据是允许的。因为 ArrayList会把所有插⼊其中的数据都当作为object类型来处理。这样，在我们使⽤ArrayList中的数据来处理问题的时候，很可能会报类型 不匹配的错误，也就是说ArrayList不是类型安全的。既使我们保证在插⼊数据的时候都很小心，都有插⼊了同⼀类型的数据，但在使⽤的 时候，我们也需要将它们转化为对应的原类型来处理。这就存在了装箱与拆箱的操作，会带来很⼤的性能损耗。 　　正是因为ArrayList存在不安全类型与装箱拆箱的缺点，所以在C#2.0后出现了泛型的概念。⽽"),i("strong",null,"List"),s("类是ArrayList类的泛型等效类。它 的⼤部分⽤法都与ArrayList相似，因为List类也继承了IList接⼝。最关键的区别在于，在声明List集合时，我们同时需要为其声明List集合 内数据的对象类型。 比如：")],-1),i("div",{class:"language-C#"},[i("button",{title:"Copy code",class:"copy"}),i("span",{class:"lang"},"C#"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[i("code",{"v-pre":""},[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"List"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"int"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"> "),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"list"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," ="),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," new"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," List"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"int"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},">();")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"//新增数据")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," list."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"Add"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"123"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},");")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"//修改数据")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"list["),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"0"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"] "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," 345"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},";")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"//移除数据")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"list."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"RemoveAt"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"0"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},");")])])]),i("button",{class:"code-block-unfold-btn"})],-1),i("p",null,"​ 上例中，如果我们往List泛型集合中插⼊string字符”hello world”，IDE就会报错，且不能通过编译。这样就避免了前⾯讲的类型安全问题与装箱拆箱的性能问题了。",-1),i("p",null,[i("strong",null,"List泛型的好处："),s(" 　　通过允许指定泛型类或⽅法操作的特定类型，泛型功能将类型安全的任务从您转移给了编译器。不需要编写代码来检测数据类型是否正确，因为会在编译时强制使⽤正确的数据类型。减少了类型强制转换的需要和运⾏时错误的可能性。泛型提供了类型安全但没有增加多个实现的开销。")],-1),i("h3",{id:"总结",tabindex:"-1"},[s("总结 "),i("a",{class:"header-anchor",href:"#总结","aria-label":'Permalink to "总结"'},"​")],-1),i("ol",null,[i("li",null,[i("p",null,"三者都⽤来处理⼀组数据，继承了IEnumerable接⼝，可⽤于for循环处理。都可以通过索引下标进⾏获取和设置元素。")]),i("li",null,[i("p",null,"Array在内存中是连续的，长度固定，⽆法删除和增加新的元素。⽽ArrayList或List的容量可根据需要⾃动插⼊和删除元素。")]),i("li",null,[i("p",null,"Array可以具有多个维度，⽽ ArrayList或 List< T> 始终只具有⼀个维度。但是，您可以轻松创建数组列表或列表的列表。")]),i("li",null,[i("p",null,"特定类型（Object 除外）的数组 的性能优于 ArrayList的性能。 这是因为 ArrayList的元素属于 Object 类型；所以在存储或检索值类型时通常发⽣装箱和拆箱操作。不过，在不需要重新分配时（即最初的容量⼗分接近列表的最⼤容量），List< T> 的性能与同类型的数组⼗分相近。")]),i("li",null,[i("p",null,"在决定使⽤ List 还是使⽤ArrayList 类（两者具有类似的功能）时，记住List 类在⼤多数情况下执⾏得更好并且是类型安全的。如果对 List< T> 类的类型T 使⽤引⽤类型，则两个类的⾏为是完全相同的。但是，如果对类型T使⽤值类型，则需要考虑实现和装箱问题。")])],-1)])]),"main-header":a(()=>[t(l.$slots,"main-header")]),"main-header-after":a(()=>[t(l.$slots,"main-header-after")]),"main-nav":a(()=>[t(l.$slots,"main-nav")]),"main-content-before":a(()=>[t(l.$slots,"main-content-before")]),"main-content":a(()=>[t(l.$slots,"main-content")]),"main-content-after":a(()=>[t(l.$slots,"main-content-after")]),"main-nav-before":a(()=>[t(l.$slots,"main-nav-before")]),"main-nav-after":a(()=>[t(l.$slots,"main-nav-after")]),comment:a(()=>[t(l.$slots,"comment")]),footer:a(()=>[t(l.$slots,"footer")]),aside:a(()=>[t(l.$slots,"aside")]),"aside-custom":a(()=>[t(l.$slots,"aside-custom")]),default:a(()=>[t(l.$slots,"default")]),_:3},8,["frontmatter"])}}};export{N as default,C as usePageData};
